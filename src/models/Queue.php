<?php

namespace booggmz\immo\models;

use booggmz\immo\models\query\OperatorQuery;
use booggmz\immo\models\query\QueueQuery;
use booggmz\immo\models\query\ServiceQuery;
use yii\db\ActiveRecord;
use yii\db\Expression;

/**
 * This is the model class for table "survey_queue".
 *
 * @property int         $id
 * @property int         $service_id
 * @property int         $operator_id
 * @property string      $created_at
 * @property string|null $executed_at
 *
 * @property Operator    $operator
 * @property Service     $service
 */
class Queue extends ActiveRecord
{
    public const EVENT_QUEUED = 'queued';

    const    R_SERVICE  = 'service';
    const    R_OPERATOR = 'operator';

    /**
     * @param bool  $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        if ($insert) {
            $this->trigger(self::EVENT_QUEUED);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public static function tableName(): string
    {
        return 'queue';
    }

    /**
     * @return array
     */
    public function rules(): array
    {
        return [
            [['service_id', 'operator_id'], 'required'],
            [['service_id', 'operator_id'], 'integer'],
            [['created_at', 'executed_at'], 'safe'],
            [['operator_id'], 'exist', 'skipOnError' => true, 'targetClass' => Operator::class, 'targetAttribute' => ['operator_id' => 'id']],
            [['service_id'], 'exist', 'skipOnError' => true, 'targetClass' => Service::class, 'targetAttribute' => ['service_id' => 'id']],
        ];
    }

    /**
     * @return string[]
     */
    public function attributeLabels(): array
    {
        return [
            'id'          => 'ID',
            'service_id'  => 'Service ID',
            'operator_id' => 'Operator ID',
            'created_at'  => 'Created At',
            'executed_at' => 'Executed At',
        ];
    }

    /**
     * Gets query for [[Operator]].
     *
     * @return \yii\db\ActiveQuery|OperatorQuery
     */
    public function getOperator(): OperatorQuery
    {
        return $this->hasOne(Operator::class, ['id' => 'operator_id']);
    }

    /**
     * Gets query for [[Service]].
     *
     * @return \yii\db\ActiveQuery|ServiceQuery
     */
    public function getService(): ServiceQuery
    {
        return $this->hasOne(Service::class, ['id' => 'service_id']);
    }

    /**
     * @return QueueQuery
     */
    public static function find(): QueueQuery
    {
        return new QueueQuery(get_called_class());
    }

    /**
     * @return $this
     */
    public function markExecuted(): self
    {
        $this->executed_at = new Expression('NOW()');

        return $this;
    }
}
